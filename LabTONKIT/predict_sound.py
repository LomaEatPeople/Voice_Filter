import os
import numpy as np
import librosa
import tensorflow as tf

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
model = tf.keras.models.load_model("dog_sound_model.h5")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô log-mel spectrogram
def extract_log_mel(path, max_len=128):
    y, sr = librosa.load(path, sr=None)
    mel = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)
    log_mel = librosa.power_to_db(mel)
    if log_mel.shape[1] < max_len:
        pad_width = max_len - log_mel.shape[1]
        log_mel = np.pad(log_mel, ((0,0),(0, pad_width)), mode='constant')
    else:
        log_mel = log_mel[:, :max_len]
    return log_mel[..., np.newaxis]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á
def predict_dog_sound(filepath):
    mel = extract_log_mel(filepath)
    mel = np.expand_dims(mel, axis=0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° batch dimension
    prediction = model.predict(mel)[0][0]
    return prediction

# ----------------------------
# ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÉ‡∏™‡πà path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢)
file_to_predict = "Dog_DataSet/1-30226-A-0.wav"  # ‚Üê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
score = predict_dog_sound(file_to_predict)
print(f"‚úÖ File: {file_to_predict}")
print(f"üéØ Confidence (‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏°‡∏≤): {score:.2f}")
print("üê∂ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏°‡∏≤" if score >= 0.5 else "‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏°‡∏≤")
